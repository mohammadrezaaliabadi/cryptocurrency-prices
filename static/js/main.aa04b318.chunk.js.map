{"version":3,"sources":["components/Table/Table.js","utils/utils.js","components/Row/Row.js","components/Pagination/Pagination.js","components/SeaachBar/SerachBar.js","config/config.js","api/api.js","hooks/usePagination.js","components/App/App.js","reportWebVitals.js","index.js"],"names":["Table","data","header","rowMap","className","style","width","map","head","height","overflow","foramtPercent","value","locale","Intl","NumberFormat","maximumFractionDigits","format","formatNumberCompact","notation","compactDisplay","Row","currency","rowData","i","srcSet","logo_url","alt","name","symbol","price","Number","parseFloat","price_change_pct","volume","market_cap","Pagination","page","count","onChange","prev","next","onClick","Array","fill","item","index","SearchBar","submitHandler","searchChangeInputHandler","search","btnClear","useState","searchClassName","setSearchClassName","searchIconHandler","useCallback","clearHandlerClick","e","preventDefault","setSearchValue","type","placeholder","searchValue","URL","KEY","formatLocale","navigator","language","getPerPageData","a","axios","get","res","getDataByIds","id","usePagination","setData","intervalObject","currentPage","setCurrentPage","currentData","clearInterval","intervalId","setIntervalId","setInterval","useEffect","Math","min","max","jump","pageNumber","maxPage","App","DATA","event","target","cursor","x","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qVAkCeA,EAhCD,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,KAAMC,EAAqB,EAArBA,OAAQC,EAAa,EAAbA,OAC7B,OACE,gCACE,kCACE,6BACE,6BACE,uBAAOC,UAAU,QAAjB,SACE,gCACE,qBAAIA,UAAU,aAAd,UACE,oBAAIC,MAAO,CAAEC,MAAO,UAApB,eACCJ,EAAOK,KAAI,SAACC,GAAD,OACV,6BAA0BA,GAA1B,eAAiBA,kBAO7B,6BACE,6BACE,qBAAKH,MAAO,CAAEI,OAAQ,SAAUC,SAAU,QAA1C,SACE,uBAAON,UAAU,QAAjB,SACE,gCAAQH,EAAKM,IAAIJ,mBClB3BQ,EAAgB,SAAUC,EAAOC,GACrC,OAAO,IAAIC,KAAKC,aAAaF,EAAQ,CACnCR,MAAO,UACPW,sBAAuB,IACtBC,OAAOL,IAGNM,EAAsB,SAAUN,EAAOC,GAC3C,OAAO,IAAIC,KAAKC,aAAaF,EAAQ,CACnCM,SAAU,UACVC,eAAgB,UACfH,OAAOL,ICmBGS,EA9BH,SAAC,GAAoB,IAAD,MDNCT,EAAOC,EAAQS,ECMjCC,EAAiB,EAAjBA,QAASC,EAAQ,EAARA,EACtB,OACE,qBAAIpB,UAAU,YAAd,UACE,oBAAIC,MAAO,CAAEC,MAAO,UAApB,SAAiCkB,EAAI,IACrC,qBAAIpB,UAAU,eAAd,UACE,qBACEqB,OAAQF,EAAQG,SAChBC,IAAK,GACLtB,MAAO,CAAEC,MAAO,SAAUG,OAAQ,YAEpC,6BAAKc,EAAQK,OACb,sBAAMxB,UAAU,WAAhB,SAA4BmB,EAAQM,YAEtC,8BDnB2BjB,ECmBPW,EAAQO,MDnBMjB,ECmBC,QDnBOS,ECmBE,MDlBzC,IAAIR,KAAKC,aAAaF,EAAQ,CACnCR,MAAO,WACPiB,SAAUA,IACTL,OAAOL,MCgBN,oBACER,UACE2B,OAAOC,WAAP,UAAkBT,EAAQ,aAA1B,aAAkB,EAAeU,mBAAqB,EAClD,aACA,YAJR,SAOGtB,EAAa,UAACY,EAAQ,aAAT,aAAC,EAAeU,iBAAkB,WAElD,6BAAKf,EAAmB,UAACK,EAAQ,aAAT,aAAC,EAAeW,UAExC,6BAAKhB,EAAmB,OAACK,QAAD,IAACA,OAAD,EAACA,EAASY,kBCLzBC,G,MAxBI,SAAC,GAA0C,EAAxCC,KAAyC,IAAnCC,EAAkC,EAAlCA,MAAOC,EAA2B,EAA3BA,SAAUC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,KACjD,OACE,qBAAIrC,UAAU,aAAd,UACE,wBAAQsC,QAASF,EAAMpC,UAAU,OAAjC,oBAGC,IAAIuC,MAAML,GAAOM,KAAK,GAAGrC,KAAI,SAACsC,EAAMC,GAAP,OAC5B,wBAEEJ,QAAS,WACPH,EAASO,EAAQ,IAEnB1C,UAAU,OALZ,SAOG0C,EAAQ,GANJA,MAST,wBAAQJ,QAASD,EAAMrC,UAAU,OAAjC,yBC2BS2C,G,MA3CG,SAAC,GAKZ,IAJLC,EAII,EAJJA,cACAC,EAGI,EAHJA,yBACAC,EAEI,EAFJA,OACAC,EACI,EADJA,SAEA,EAA8CC,mBAAS,IAAvD,mBAAOC,EAAP,KAAwBC,EAAxB,KAEMC,EAAoBC,uBAAY,WAElCF,EADqB,IAAnBD,EACiB,SAEA,MAEpB,CAACA,IAEEI,EAAoBD,uBACxB,SAACE,GACCA,EAAEC,iBACFT,EAAOU,eAAe,MAExB,CAACV,IAEH,OACE,sBAAK9C,UAAS,iBAAYiD,GAA1B,UACE,qBAAKX,QAASa,EAAmBnD,UAAU,SAC3C,qBAAKA,UAAU,QAAf,SACE,uBACEyD,KAAK,OACLC,YAAY,4BACZvB,SAAUU,EACVrC,MAAK,OAAEsC,QAAF,IAAEA,OAAF,EAAEA,EAAQa,YACf3D,UAAU,mBAGb+C,GAAY,sBAAMT,QAASe,EAAmBrD,UAAU,UACzD,sBAAMsC,QAASM,EAAe5C,UAAU,SAAxC,SACE,sBAAMA,UAAU,cAAhB,iC,gBCtCF4D,EAAG,UAFO,6BAEP,qBACHC,EAAM,2CACRC,GACMC,UAAUC,SACR,OCHNC,EAAc,uCAAG,WAAOhC,GAAP,eAAAiC,EAAA,sEACHC,IAAMC,IAAN,UACbR,EADa,sBDHH,ICGG,iBACuB3B,EADvB,qBACwC6B,EADxC,gBACqED,IAFlE,cACfQ,EADe,gBAIRA,EAAIxE,KAJI,mFAAH,sDAcdyE,EAAY,uCAAG,WAAOC,GAAP,eAAAL,EAAA,sEACDC,IAAMC,IAAN,UACbR,EADa,+CAC6BW,EAD7B,2BACkDT,EADlD,gBAC+ED,IAF9E,cACbQ,EADa,gBAINA,EAAIxE,KAJE,mFAAH,sD,QCoBH2E,EAhCO,SAACC,EAASC,GAC9B,MAAsC1B,mBAAS,GAA/C,mBAAO2B,EAAP,KAAoBC,EAApB,KAGMC,EAAczB,sBAAW,sBAAC,sBAAAc,EAAA,6DAC9BY,cAAcJ,EAAeK,YADC,KAE9BN,EAF8B,SAEhBR,EAAeU,GAFC,kCAGhB,OAAdD,QAAc,IAAdA,KAAgBM,cACdC,YAAW,sBAAC,sBAAAf,EAAA,kEACVO,EADU,SACIR,EAAeU,GADnB,6EAET,MANyB,2CAQ7B,CAACA,EAAaD,EAAeK,aAChCG,oBAAS,sBAAC,sBAAAhB,EAAA,sEACFW,IADE,2CAEP,CAACF,IAcJ,MAAO,CAAEtC,KAZI,WACXuC,GAAe,SAACD,GAAD,OAAiBQ,KAAKC,IAAIT,EAAc,EFtB1C,SEiCAvC,KARF,WACXwC,GAAe,SAACD,GAAD,OAAiBQ,KAAKE,IAAIV,EAAc,EAAG,OAOvCW,KAJR,SAACrD,GACZ,IAAMsD,EAAaJ,KAAKE,IAAI,EAAGpD,GAC/B2C,GAAe,SAACD,GAAD,OAAiBQ,KAAKC,IAAIG,EF/B5B,SEiCYV,cAAaF,cAAaa,QFjCtC,MGuEFC,MA/Df,WACE,MAAwBzC,mBAAS,IAAjC,mBAAOnD,EAAP,KAAa4E,EAAb,KAEA,EAAsCzB,mBAAS,IAA/C,mBAAOW,EAAP,KAAoBH,EAApB,KACA,EAAoCR,qBAApC,mBAAO+B,EAAP,KAAmBC,EAAnB,KACMU,EAAOlB,EAAcC,EAAS,CAAEM,aAAYC,kBAC5CpC,EAAgBQ,sBAAW,uCAC/B,WAAOE,GAAP,SAAAY,EAAA,6DACEZ,EAAEC,iBACFuB,cAAcC,GAFhB,KAGEN,EAHF,SAGgBH,EAAaX,GAH7B,kCAIEqB,EACEC,YAAW,sBAAC,sBAAAf,EAAA,kEACVO,EADU,SACIH,EAAaX,GADjB,6EAET,MAPP,2CAD+B,sDAW/B,CAACoB,EAAYpB,IAGTd,EAA2BO,uBAC/B,SAACuC,GACCnC,EAAemC,EAAMC,OAAOpF,SAE9B,CAACmD,IAGH,OACE,sBAAK3D,UAAU,MAAf,UACE,sBAAKA,UAAU,SAAf,UACE,oBACEC,MAAO,CAAE4F,OAAQ,WACjBvD,QAAO,sBAAE,sBAAA4B,EAAA,sEACDwB,EAAKb,cADJ,2CAFX,2BAQA,cAAC,EAAD,CACE/B,OAAQ,CAAEa,YAAaA,EAAaH,eAAgBA,GACpDZ,cAAeA,EACfC,yBAA0BA,OAG9B,cAAC,EAAD,CACEhD,KAAMA,EACNC,OA5Cc,CAAC,OAAQ,QAAS,YAAa,SAAU,cA6CvDC,OAAQ,SAAC+F,EAAG1E,GAAJ,OAAU,cAAC,EAAD,CAAgBA,EAAGA,EAAGD,QAAS2E,GAArBA,EAAEvB,OAEhC,qBAAKvE,UAAU,SAAf,SACE,cAAC,EAAD,CACEkC,MAAO,GACPC,SAAU,SAACf,GACTsE,EAAKJ,KAAKlE,IAEZgB,KAAMsD,EAAKtD,KACXC,KAAMqD,EAAKrD,aCrDN0D,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.aa04b318.chunk.js","sourcesContent":["import \"./Table.scss\";\r\n\r\nconst Table = ({ data, header, rowMap }) => {\r\n  return (\r\n    <table>\r\n      <tbody>\r\n        <tr>\r\n          <td>\r\n            <table className=\"table\">\r\n              <thead>\r\n                <tr className=\"table-head\">\r\n                  <td style={{ width: \"1.5rem\" }}>#</td>\r\n                  {header.map((head) => (\r\n                    <td key={`head-${head}`}>{head}</td>\r\n                  ))}\r\n                </tr>\r\n              </thead>\r\n            </table>\r\n          </td>\r\n        </tr>\r\n        <tr>\r\n          <td>\r\n            <div style={{ height: \"1000px\", overflow: \"auto\" }}>\r\n              <table className=\"table\">\r\n                <tbody>{data.map(rowMap)}</tbody>\r\n              </table>\r\n            </div>\r\n          </td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n  );\r\n};\r\n\r\nexport default Table;\r\n","const formatCurrency = function (value, locale, currency) {\r\n  return new Intl.NumberFormat(locale, {\r\n    style: \"currency\",\r\n    currency: currency,\r\n  }).format(value);\r\n};\r\nconst foramtPercent = function (value, locale) {\r\n  return new Intl.NumberFormat(locale, {\r\n    style: \"percent\",\r\n    maximumFractionDigits: 2,\r\n  }).format(value);\r\n};\r\n\r\nconst formatNumberCompact = function (value, locale) {\r\n  return new Intl.NumberFormat(locale, {\r\n    notation: \"compact\",\r\n    compactDisplay: \"short\",\r\n  }).format(value);\r\n};\r\nexport { formatCurrency, foramtPercent, formatNumberCompact };\r\n","import {\r\n  foramtPercent,\r\n  formatCurrency,\r\n  formatNumberCompact,\r\n} from \"../../utils/utils\";\r\n\r\nconst Row = ({ rowData, i }) => {\r\n  return (\r\n    <tr className=\"table-row\">\r\n      <td style={{ width: \"1.8rem\" }}>{i + 1}</td>\r\n      <td className=\"first-column\">\r\n        <img\r\n          srcSet={rowData.logo_url}\r\n          alt={\"\"}\r\n          style={{ width: \"1.5rem\", height: \"1.5rem\" }}\r\n        />\r\n        <h3>{rowData.name}</h3>\r\n        <span className=\"data-sub\">{rowData.symbol}</span>\r\n      </td>\r\n      <td>{formatCurrency(rowData.price, \"en-us\", \"USD\")}</td>\r\n      <td\r\n        className={\r\n          Number.parseFloat(rowData[\"1d\"]?.price_change_pct) >= 0\r\n            ? \"high-style\"\r\n            : \"low-style\"\r\n        }\r\n      >\r\n        {foramtPercent(rowData[\"1d\"]?.price_change_pct, \"en-us\")}\r\n      </td>\r\n      <td>{formatNumberCompact(rowData[\"1d\"]?.volume)}</td>\r\n\r\n      <td>{formatNumberCompact(rowData?.market_cap)}</td>\r\n    </tr>\r\n  );\r\n};\r\n\r\nexport default Row;\r\n","import \"./Pagination.css\";\r\n\r\nconst Pagination = ({ page, count, onChange, prev, next }) => {\r\n  return (\r\n    <ul className=\"pagination\">\r\n      <button onClick={prev} className=\"page\">\r\n        ◀\r\n      </button>\r\n      {new Array(count).fill(0).map((item, index) => (\r\n        <button\r\n          key={index}\r\n          onClick={() => {\r\n            onChange(index + 1);\r\n          }}\r\n          className=\"page\"\r\n        >\r\n          {index + 1}\r\n        </button>\r\n      ))}\r\n      <button onClick={next} className=\"page\">\r\n        ▶\r\n      </button>\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default Pagination;\r\n","import \"./SearchBar.scss\";\r\nimport { useCallback, useState } from \"react\";\r\n\r\nconst SearchBar = ({\r\n  submitHandler,\r\n  searchChangeInputHandler,\r\n  search,\r\n  btnClear,\r\n}) => {\r\n  const [searchClassName, setSearchClassName] = useState(\"\");\r\n\r\n  const searchIconHandler = useCallback(() => {\r\n    if (searchClassName == \"\") {\r\n      setSearchClassName(\"active\");\r\n    } else {\r\n      setSearchClassName(\"\");\r\n    }\r\n  }, [searchClassName]);\r\n\r\n  const clearHandlerClick = useCallback(\r\n    (e) => {\r\n      e.preventDefault();\r\n      search.setSearchValue(\"\");\r\n    },\r\n    [search]\r\n  );\r\n  return (\r\n    <div className={`search ${searchClassName}`}>\r\n      <div onClick={searchIconHandler} className=\"icon\"></div>\r\n      <div className=\"input\">\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Search By ids, smaple:BTC\"\r\n          onChange={searchChangeInputHandler}\r\n          value={search?.searchValue}\r\n          className=\"input-search\"\r\n        />\r\n      </div>\r\n      {btnClear && <span onClick={clearHandlerClick} className=\"clear\"></span>}\r\n      <span onClick={submitHandler} className=\"submit\">\r\n        <span className=\"submit-icon\">🔎</span>\r\n      </span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchBar;\r\n","const BAS_URL = \"https://api.nomics.com/v1/\";\r\nlet maxPerPage = 100;\r\nconst URL = `${BAS_URL}currencies/ticker`;\r\nconst KEY = \"bc281b24f1951347de7e1c4b54ee193e5dbb6c0c\";\r\nlet formatLocale = {\r\n  locale: navigator.language,\r\n  currency: \"USD\",\r\n};\r\nexport { maxPerPage, URL, KEY, formatLocale };\r\n","import axios from \"axios\";\r\nimport { maxPerPage, URL, KEY, formatLocale } from \"../config/config\";\r\n\r\nconst getPerPageData = async (page) => {\r\n  const res = await axios.get(\r\n    `${URL}?&per-page=${maxPerPage}&page=${page}&currency=${formatLocale.currency}&key=${KEY}`\r\n  );\r\n  return await res.data;\r\n};\r\n\r\nconst getDataBySymbols = async (symbols) => {\r\n  const res = await axios.get(\r\n    `${URL}?interval=1h,1d,7d,30d,365d,ytd&symbols=${symbols}&quote-currency=${formatLocale.currency}&key=${KEY}`\r\n  );\r\n  return await res.data;\r\n};\r\n\r\nconst getDataByIds = async (id) => {\r\n  const res = await axios.get(\r\n    `${URL}?interval=1h,1d,7d,30d,365d,ytd&ids=${id}&quote-currency=${formatLocale.currency}&key=${KEY}`\r\n  );\r\n  return await res.data;\r\n};\r\n\r\nexport { getPerPageData, getDataByIds, getDataBySymbols };\r\n//https://nomics.com/data/currencies-ticker?interval=1h,1d,7d,30d,365d,ytd&quote-currency=USD&symbols=BTC&key=bc281b24f1951347de7e1c4b54ee193e5dbb6c0c\r\n//https://api.nomics.com/v1/currencies/ticker?interval=1h,1d,7d,30d,365d,ytd&symbols=BTC&quote-currency=USD&key=bc281b24f1951347de7e1c4b54ee193e5dbb6c0c\r\n","import { useState } from \"react\";\r\nimport { useCallback, useEffect } from \"react/cjs/react.development\";\r\nimport { getPerPageData } from \"../api/api\";\r\nimport { maxPerPage } from \"../config/config\";\r\n\r\nconst usePagination = (setData, intervalObject) => {\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n\r\n  const maxPage = maxPerPage;\r\n  const currentData = useCallback(async () => {\r\n    clearInterval(intervalObject.intervalId);\r\n    setData(await getPerPageData(currentPage));\r\n    intervalObject?.setIntervalId(\r\n      setInterval(async () => {\r\n        setData(await getPerPageData(currentPage));\r\n      }, 10000)\r\n    );\r\n  }, [currentPage, intervalObject.intervalId]);\r\n  useEffect(async () => {\r\n    await currentData();\r\n  }, [currentPage]);\r\n\r\n  const next = () => {\r\n    setCurrentPage((currentPage) => Math.min(currentPage + 1, maxPage));\r\n  };\r\n\r\n  const prev = () => {\r\n    setCurrentPage((currentPage) => Math.max(currentPage - 1, 1));\r\n  };\r\n\r\n  const jump = (page) => {\r\n    const pageNumber = Math.max(1, page);\r\n    setCurrentPage((currentPage) => Math.min(pageNumber, maxPage));\r\n  };\r\n  return { next, prev, jump, currentData, currentPage, maxPage };\r\n};\r\n\r\nexport default usePagination;\r\n","import \"./App.scss\";\nimport { useCallback, useState } from \"react\";\nimport Table from \"../Table/Table\";\nimport Row from \"../Row/Row\";\nimport Pagination from \"../Pagination/Pagination\";\nimport SearchBar from \"../SeaachBar/SerachBar\";\nimport { getDataByIds } from \"../../api/api\";\nimport usePagination from \"../../hooks/usePagination\";\n\nfunction App() {\n  const [data, setData] = useState([]);\n  const headerTable = [\"NAME\", \"PRICE\", \"1D CHANGE\", \"VOLUME\", \"MARKET CAP\"];\n  const [searchValue, setSearchValue] = useState(\"\");\n  const [intervalId, setIntervalId] = useState();\n  const DATA = usePagination(setData, { intervalId, setIntervalId });\n  const submitHandler = useCallback(\n    async (e) => {\n      e.preventDefault();\n      clearInterval(intervalId);\n      setData(await getDataByIds(searchValue));\n      setIntervalId(\n        setInterval(async () => {\n          setData(await getDataByIds(searchValue));\n        }, 10000)\n      );\n    },\n    [intervalId, searchValue]\n  );\n\n  const searchChangeInputHandler = useCallback(\n    (event) => {\n      setSearchValue(event.target.value);\n    },\n    [searchValue]\n  );\n\n  return (\n    <div className=\"App\">\n      <div className=\"header\">\n        <h1\n          style={{ cursor: \"pointer\" }}\n          onClick={async () => {\n            await DATA.currentData();\n          }}\n        >\n          Crypto prices\n        </h1>\n        <SearchBar\n          search={{ searchValue: searchValue, setSearchValue: setSearchValue }}\n          submitHandler={submitHandler}\n          searchChangeInputHandler={searchChangeInputHandler}\n        />\n      </div>\n      <Table\n        data={data}\n        header={headerTable}\n        rowMap={(x, i) => <Row key={x.id} i={i} rowData={x} />}\n      />\n      <div className=\"footer\">\n        <Pagination\n          count={10}\n          onChange={(i) => {\n            DATA.jump(i);\n          }}\n          prev={DATA.prev}\n          next={DATA.next}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App/App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}